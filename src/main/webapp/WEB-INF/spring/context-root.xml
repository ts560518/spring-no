<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- 
		메일 발송을 MailServiceImpl이 담당하기 때문에 context-root.xml에 정의되어야 한다.
		JavaMailSenderImpl 객체는 메일 발송을 지원하는 객체다.
		메일서버에 대한 설정이 필요하다. host, port, username, password를 설정한다.
	 -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com"></property>
		<property name="port" value="587"></property>
		<property name="username" value="zcam9708@gmail.com"></property>
		<property name="password" value="zxcv1234!@#$"></property>
		<property name="javaMailProperties">
			<props>
				<prop key="mail.transport.protocol">smtp</prop>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.debug">true</prop>
			</props>
		</property>
	</bean>
	
	<!-- /data/db.properties 파일의 정보를 불러오는 클래스를 스프링의 빈으로 등록한다. -->
	<context:property-placeholder location="classpath:/database/db.properties"/>

	<!-- 데이터베이스 커넥션 풀링을 지원하는 클래스를 스프링 컨테이너의 빈으로 등록한다. -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="${db.driverClassName}"></property>
		<property name="url" value="${db.url}"></property>
		<property name="username" value="${db.username}"></property>
		<property name="password" value="${db.password}"></property>
	</bean>
	
	<!-- 선언적 트랜잭션처리를 지원하는 트랜잭션매니저 클래스를 스프링 컨테이너의 빈으로 등록한다. -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- @Transaction 어노테이션을 부착한 서비스클래스에 선언적트랜잭션처리를 지원하는 클래스를 스프링의 빈으로 등록한다. -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- myBatis의 핵심클래스를 스프링 컨테이너의 빈으로 등록한다. -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="typeAliasesPackage" value="com.example.demo.vo,com.example.demo.dto"></property>
		<property name="mapperLocations" value="classpath:/mybatis/mappers/*.xml"></property>
		<property name="configurationProperties">
			<props>
				<prop key="jdbcTypeForNull">NULL</prop>
			</props>
		</property>
	</bean>
	
	<!-- Mapper Interface를 스캔해서 구현객체를 생성하고 스프링 컨테이너의 빈으로 등록하는 MapperScannerConfigurer를 스프링 컨테이너의 빈으로 등록한다. -->
	<mybatis-spring:scan base-package="com.example.demo.dao" factory-ref="sqlSessionFactory"/>

	<!-- @어노테이션 설정을 감지하고 적절한 작업을 수행하는 빈들을 스프링 컨테이너의 빈으로 등록한다. -->
	<context:annotation-config></context:annotation-config>
	
	<!-- com.example.demo.service 패키지의 서비스구현클래스를 스캔해서 스프링 컨테이너의 빈으로 등록한다. -->
	<context:component-scan base-package="com.example.demo"></context:component-scan>

</beans>
